SkACL.create({ model: 'SkUser',property: '*', accessType: '*', permission: 'DENY', principalType: 'ROLE', principalId: '$everyone'})

SkRole.create({ name: '$sys-admin', description: 'system admin'})
SkRole.create({ name: '$sk-admin', description: 'shop admin'})

SmsTemplate.create({ text: 'Please use the OTP <%= otp %> to login into account.', isActive: true, id: 'OTP' })

SkACL.create({ model: 'SkUser',property: 'register', accessType: 'EXECUTE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$everyone'})
SkACL.create({ model: 'SkUser',property: 'logout', accessType: 'EXECUTE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$authenticated'})

SkACL.create({ model: 'SkUser',property: 'findOne', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'ShopKeeper',property: 'getShopConfig', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'ShopKeeper',property: 'find', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})

// $sk-admin
SkRole.findOneById('5df601d32f557201e6bd913c').then(data => { data.routes = ['/dashboard', '/customers/list', '/customers/detail', '/customers/add', '/transactions', '/profile']; return data.save(); })


db.SkRoleMapping.createIndex({roleId: 1, principalType: 1, principalId: 1})

SkACL.create({ model: 'Customer',property: 'create', accessType: 'WRITE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Customer',property: 'findById', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Customer',property: 'find', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Customer',property: 'patchAttributes', accessType: 'WRITE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Customer',property: 'addTransaction', accessType: 'EXECUTE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Customer',property: 'getDetails', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})

SkACL.create({ model: 'ShopKeeper',property: 'getTxnDetails', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'ShopKeeper',property: 'dashboard', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})

credit
debit
settled

total amount => 500
received amount => 0

settle 0

total amount => 600
received amount => 800

settle => 600

total amount => 0
received amount => 300

settle => 0

total amount => 400
received amount => 300

if ((recevei >= total)) {
  settle = total
} else if ( (received < total)) {
  settle = received
}


if (total > 0) {
  transaction.create({amount: total, type: 'settled'})
}
if (received <= total) {
  if ((total - received) > 0) {
    transaction.create({amount: (total - received), type: 'debit'})
  }
  settle = received
} else {
  if ((received - total) > 0) {
    transaction.create({amount: (received - total), type: 'credit'})
  }
  settle = total
}


SkRole.findOneById('5df601d32f557201e6bd913c').then(data => { data.routes = [...data.routes, '/transactions/detail']; return data.save(); })
SkACL.create({ model: 'Customer',property: 'getTxnDetail', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Customer',property: 'deleteTransaction', accessType: 'EXECUTE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'ShopKeeper',property: 'getCustomers', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})

SkRole.findOneById('5df601d32f557201e6bd913c').then(data => { data.routes = Array.from(new Set([...data.routes, '/products', '/bucket', '/orders/list', '/orders/detail'])); return data.save(); })



SkACL.create({ model: 'Product', property: '*', accessType: '*', permission: 'DENY', principalType: 'ROLE', principalId: '$everyone'})
SkACL.create({ model: 'Product',property: 'find', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Product',property: 'create', accessType: 'WRITE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})

SkACL.create({ model: 'Customer',property: 'updateBucket', accessType: 'EXECUTE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'ShopKeeper',property: 'getProducts', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$sk-admin'})
SkACL.create({ model: 'Customer',property: 'findDetails', accessType: 'EXECUTE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$everyone'})
SkACL.create({ model: 'Customer',property: 'getBucket', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$everyone'})

SkACL.create({ model: 'ShopKeeper',property: 'placeOrder', accessType: 'EXECUTE', permission: 'ALLOW', principalType: 'ROLE', principalId: '$everyone'})
SkACL.create({ model: 'ShopKeeper',property: 'getOrders', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$everyone'})
SkACL.create({ model: 'ShopKeeper',property: 'getOrderDetails', accessType: 'READ', permission: 'ALLOW', principalType: 'ROLE', principalId: '$everyone'})
